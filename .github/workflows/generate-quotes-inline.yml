name: Generate Quotes Inline
on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pyyaml pandas requests

      # 1) S&P top50 + BTC + top10 alts -> data/symbols_dynamic.yaml
      - name: Build dynamic universe
        run: |
          mkdir -p data
          python - <<'PY'
          import pandas as pd, requests, yaml, json, re
          import yfinance as yf

          url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
          tables = pd.read_html(url)
          sp = tables[0]
          tickers = sp["Symbol"].astype(str).str.replace(r"[^\w\.]", "", regex=True).tolist()

          caps = []
          for t in tickers:
              try:
                  info = yf.Ticker(t).fast_info
                  mc = getattr(info, "market_cap", None)
                  if mc is None:
                      mc = yf.Ticker(t).info.get("marketCap")
                  if mc: caps.append((t, mc))
              except Exception:
                  pass
          caps.sort(key=lambda x: x[1], reverse=True)
          top50 = [t for t,_ in caps[:50]]

          cg = requests.get(
              "https://api.coingecko.com/api/v3/coins/markets",
              params={"vs_currency":"usd","order":"market_cap_desc","per_page":11,"page":1,"sparkline":"false"},
              timeout=30
          ).json()
          crypto = []
          for c in cg:
              s = f"{c['symbol'].upper()}-USD"
              base = s.split("-")[0]
              crypto.append({"id": base, "asset_class":"crypto", "source":"yfinance", "query": s})

          universe = [{"id": t, "asset_class":"equity", "source":"yfinance", "query": t} for t in top50] + crypto
          out = {"generated_from":"wiki+coingecko","equities_count":len(top50),"crypto_count":len(crypto),"universe":universe}
          with open("data/symbols_dynamic.yaml","w") as f:
              yaml.safe_dump(out, f, sort_keys=False)
          print("WROTE data/symbols_dynamic.yaml with", len(universe), "symbols")
          PY
      - run: |
          echo "== After symbols generation =="
          ls -la
          ls -la data
          echo "---- symbols_dynamic.yaml (first 30 lines) ----"
          head -n 30 data/symbols_dynamic.yaml

      # 2) Quotes -> data/quotes.json
      - name: Generate quotes.json
        run: |
          python - <<'PY'
          import json, yaml, os
          from datetime import datetime, timezone
          import yfinance as yf

          with open("data/symbols_dynamic.yaml","r") as f:
              uni = yaml.safe_load(f)["universe"]

          def last_price(ticker):
              t = yf.Ticker(ticker)
              df = None
              try: df = t.history(period="1d", interval="1m")
              except Exception: df = None
              if df is None or df.empty:
                  try: df = t.history(period="5d", interval="5m")
                  except Exception: df = None
              if df is None or df.empty:
                  try: df = t.history(period="1mo", interval="1d")
                  except Exception: df = None
              if df is None or df.empty: return None, None
              last = df.tail(1)
              try: ts = last.index[0].tz_convert("UTC").isoformat()
              except Exception: ts = datetime.now(timezone.utc).isoformat()
              return float(last["Close"].iloc[0]), ts

          quotes = []
          for it in uni:
              px, ts = last_price(it["query"])
              if px is None: continue
              quotes.append({"id":it["id"],"asset_class":it["asset_class"],"source":it["source"],
                             "query":it["query"],"price":px,"ts":ts})

          out = {"generated_at": datetime.now(timezone.utc).isoformat(), "quotes": quotes}
          os.makedirs("data", exist_ok=True)
          with open("data/quotes.json","w") as f:
              json.dump(out, f, indent=2)
          print("WROTE data/quotes.json with", len(quotes), "quotes")
          PY
      - run: |
          echo "---- quotes.json (first 40 lines) ----"
          head -n 40 data/quotes.json

      # 3) Indicators -> data/indicators.json
      - name: Generate indicators.json (RSI14, SMA20/50)
        run: |
          python - <<'PY'
          import json, yaml, os
          from datetime import datetime, timezone
          import yfinance as yf
          import pandas as pd

          with open("data/symbols_dynamic.yaml","r") as f:
              uni = yaml.safe_load(f)["universe"]

          def fetch_df(ticker):
              t = yf.Ticker(ticker)
              for per,iv in [("1mo","1d"),("5d","5m")]:
                  try:
                      df = t.history(period=per, interval=iv)
                      if df is not None and not df.empty:
                          return df
                  except Exception:
                      pass
              return None

          def indicators(df: pd.DataFrame):
              out = {}
              if df is None or df.empty or "Close" not in df.columns: return out
              c = df["Close"].dropna()
              if len(c)>=20: out["sma20"]=float(c.rolling(20).mean().iloc[-1])
              if len(c)>=50: out["sma50"]=float(c.rolling(50).mean().iloc[-1])
              if len(c)>=15:
                  d=c.diff(); up=d.clip(lower=0).rolling(14).mean(); down=(-d.clip(upper=0)).rolling(14).mean()
                  rs=up/down; rsi=100-(100/(1+rs))
                  out["rsi14"]=float(rsi.iloc[-1])
              return out

          rows=[]
          for it in uni:
              ind = indicators(fetch_df(it["query"]))
              if ind: rows.append({"id":it["id"],"asset_class":it["asset_class"],"query":it["query"],**ind})

          out = {"generated_at": datetime.now(timezone.utc).isoformat(), "indicators": rows}
          os.makedirs("data", exist_ok=True)
          with open("data/indicators.json","w") as f:
              json.dump(out, f, indent=2)
          print("WROTE data/indicators.json with", len(rows), "rows")
          PY
      - run: |
          echo "---- indicators.json (first 40 lines) ----"
          head -n 40 data/indicators.json || true

      # Commit & push
      - name: Commit & push artifacts
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase
          git status
          ls -la data
          git add -A
          git diff --staged --name-status || true
          git commit -m "update dynamic symbols, quotes, indicators" || echo "No changes"
          git push
