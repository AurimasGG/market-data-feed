name: Generate Quotes Inline
on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *"   # kas 30 min.

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pyyaml pandas requests lxml html5lib

      # ---------- QUOTES su papildomais laukais ----------
      - name: Generate data/quotes.json (rich fields)
        run: |
          set -e
          python - <<'PY'
          import json, yaml, os
          from datetime import datetime, timezone
          import yfinance as yf

          # 1) Visata iš symbols.yaml (repo root)
          with open("symbols.yaml","r") as f:
              uni = yaml.safe_load(f)["universe"]

          # 2) Helper: paimti paskutinę žvakę su fallback
          def last_bar(ticker: str):
              t = yf.Ticker(ticker)
              df = None
              for per, iv in [("1d","1m"), ("5d","5m"), ("1mo","1d")]:
                  try:
                      df = t.history(period=per, interval=iv)
                      if df is not None and not df.empty:
                          break
                  except Exception:
                      pass
              if df is None or df.empty:
                  return None
              row = df.tail(1).iloc[0]
              ts = df.tail(1).index[0]
              try:
                  ts = ts.tz_convert("UTC").isoformat()
              except Exception:
                  ts = datetime.now(timezone.utc).isoformat()

              # Greita papildoma info
              fast = {}
              try:
                  fi = t.fast_info
                  fast = {
                      "market_cap": getattr(fi, "market_cap", None),
                      "year_high": getattr(fi, "year_high", None),
                      "year_low": getattr(fi, "year_low", None),
                      "previous_close": getattr(fi, "previous_close", None),
                      "currency": getattr(fi, "currency", None),
                  }
              except Exception:
                  pass

              return {
                  "price": float(row["Close"]),
                  "open": float(row.get("Open", row["Close"])),
                  "high": float(row.get("High", row["Close"])),
                  "low": float(row.get("Low", row["Close"])),
                  "volume": float(row.get("Volume", 0) or 0),
                  "ts": ts,
                  **{k: v for k, v in fast.items() if v is not None},
              }

          # 3) Sudarom quotes su papildomais laukais + % pokytis
          quotes = []
          for it in uni:
              bar = last_bar(it["query"])
              if not bar:
                  continue
              prev = bar.get("previous_close")
              pct = None
              if prev:
                  try:
                      pct = (bar["price"] / prev - 1) * 100.0
                  except Exception:
                      pct = None
              quotes.append({
                  "id": it["id"],
                  "asset_class": it["asset_class"],
                  "source": it["source"],
                  "query": it["query"],
                  **bar,
                  **({"pct_change": pct} if pct is not None else {}),
              })

          out = {"generated_at": datetime.now(timezone.utc).isoformat(), "quotes": quotes}
          os.makedirs("data", exist_ok=True)
          with open("data/quotes.json","w") as f:
              json.dump(out, f, indent=2)
          print("WROTE data/quotes.json with", len(quotes), "quotes")
          PY
      - run: |
          echo "---- quotes.json (first 60 lines) ----"
          head -n 60 data/quotes.json || true

      # ---------- (Pasirinktinai) INDIKATORIAI ----------
      - name: Generate data/indicators.json (RSI14, SMA20/50)
        run: |
          python - <<'PY'
          import json, yaml, os
          from datetime import datetime, timezone
          import yfinance as yf
          import pandas as pd

          with open("symbols.yaml","r") as f:
              uni = yaml.safe_load(f)["universe"]

          def fetch_df(ticker):
              t = yf.Ticker(ticker)
              for per, iv in [("1mo","1d"), ("5d","5m")]:
                  try:
                      df = t.history(period=per, interval=iv)
                      if df is not None and not df.empty:
                          return df
                  except Exception:
                      pass
              return None

          def indicators(df: pd.DataFrame):
              out = {}
              if df is None or df.empty or "Close" not in df.columns:
                  return out
              c = df["Close"].dropna()
              if len(c) >= 20:
                  out["sma20"] = float(c.rolling(20).mean().iloc[-1])
              if len(c) >= 50:
                  out["sma50"] = float(c.rolling(50).mean().iloc[-1])
              if len(c) >= 15:
                  d = c.diff()
                  up = d.clip(lower=0).rolling(14).mean()
                  down = (-d.clip(upper=0)).rolling(14).mean()
                  rs = up / down
                  rsi = 100 - (100 / (1 + rs))
                  out["rsi14"] = float(rsi.iloc[-1])
              return out

          rows = []
          for it in yaml.safe_load(open("symbols.yaml"))["universe"]:
              ind = indicators(fetch_df(it["query"]))
              if ind:
                  rows.append({"id": it["id"], "asset_class": it["asset_class"], "query": it["query"], **ind})

          out = {"generated_at": datetime.now(timezone.utc).isoformat(), "indicators": rows}
          os.makedirs("data", exist_ok=True)
          with open("data/indicators.json","w") as f:
              json.dump(out, f, indent=2)
          print("WROTE data/indicators.json with", len(rows), "rows")
          PY
      - run: |
          echo "---- indicators.json (first 40 lines) ----"
          head -n 40 data/indicators.json || true

      - name: Commit & push artifacts
        run: |
          set -e
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "== Show changes =="
          git status
          ls -la data || true

          echo "== Stash ALL (incl. untracked) =="
          git stash push --include-untracked -m "ci-autostash" || true

          echo "== Reset to remote main (clean tree) =="
          git fetch origin
          git checkout -B main origin/main
          git reset --hard origin/main

          echo "== Restore stashed changes (may be empty) =="
          git stash pop || true

          echo "== Stage / commit / push =="
          git add -A
          git diff --staged --name-status || true
          git commit -m "update quotes (rich fields) and indicators" || echo "No changes to commit"
          git push origin main

